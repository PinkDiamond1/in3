utils:
  in3_cacheClear:
    sync: true
    descr: clears the incubed cache (usually found in the .in3-folder)
    result:
      descr: true indicating the success
    example: 
      request: []
      response: true

  web3_clientVersion:
    descr: Returns the underlying client version. See [web3_clientversion](https://eth.wiki/json-rpc/API#web3_clientversion) for spec.
    result:
      descr: when connected to the incubed-network, `Incubed/<Version>` will be returned, but in case of a direct enpoint, its's version will be used.

  keccak:
    sync: true
    alias: web3_sha3

  web3_sha3:
    sync: true
    descr: |
      Returns Keccak-256 (not the standardized SHA3-256) of the given data.

      See [web3_sha3](https://eth.wiki/json-rpc/API#web3_sha3) for spec.

      No proof needed, since the client will execute this locally. 
    params:
      data:
        descr: data to hash
        type: bytes
    result:
      descr: the 32byte hash of the data
    example:
      request:
        - "0x1234567890"
      response: "0x3a56b02b60d4990074262f496ac34733f870e1b7815719b46ce155beac5e1a41"

  sha256:
    sync: true
    descr: |
      Returns sha-256 of the given data.

      No proof needed, since the client will execute this locally. 
    params:
      data:
        descr: data to hash
        type: bytes
    result:
      descr: the 32byte hash of the data
    example:
      request:
        - "0x1234567890"
      response: "0x6c450e037e79b76f231a71a22ff40403f7d9b74b15e014e52fe1156d3666c3e6"


  in3_http:
    descr: sends a simple http-request. This is used internally to fetch data from REST-APIs.
    params: 
      method:
        type: string
        descr: the HTTP-method to use like 'GET', 'POST', 'PUT', 'DELETE',...
      url:
        type: string
        descr: the url of the endpoint
      payload:
        type: string
        descr: the payload or null, if it does not apply
        nullable: true
        optional: true
      headers:
        type: string
        array: true
        optional: true
        descr: "a array of additional headers to send. each header must be a string in the form `Key: Value`"
    result:
      type: any
      descr: the response will depend on the http-response. If the data are json-data, the json-object will the response.
    example:
      request:
        - POST
        - https://reqbin.com/echo/post/json
        - {"id":78912,"Customer":"Jason Sweet","Price": 18}
        - ["Accept: application/json","Content-Type: application/json"]
      
      
      

account:

  in3_createKey:
    sync: true
    descr: |
      Generates 32 random bytes.
      If /dev/urandom is available it will be used and should generate a secure random number.
      If not the number should not be considered sceure or used in production.
    params:
      seed:
        optional: true
        descr: the seed. If given the result will be deterministic.
        type: bytes
    result:
      descr: the 32byte random data
    example:
      request: []
      response: "0x6c450e037e79b76f231a71a22ff40403f7d9b74b15e014e52fe1156d3666c3e6"

  in3_bip32:
    sync: true
    descr: |
      Generates 32 byte private key based on BIP 32.
    params:
      seed:
        descr: the seed. it mus be at least 16 bytes long
        type: bytes
      curve:
        descr: the name of the curve. should be one of `secp256k1`,`secp256k1-decred`,`secp256k1-groestl`,`secp256k1-smart`,`nist256p1`,`ed25519`,`ed25519 cardano seed`,`ed25519-sha3`,`curve25519`,`ed25519-keccak`
        default: secp256k1
        optional: true
        type: string
      path:
        descr: the derivation path as specified in BIP32
        example: m/2/3
        type: string
        optional: true
    result:
      descr: theprivate key
      type: bytes32
    example:
      request: 
        - "0x1234567890123456789012345678901234567890"
        - secp256k1
        - m/4
      response: "0xd747eb5734828a3c3fc617cb98c47964bd1df96ec05ce2a2c6618782d2c43645"
