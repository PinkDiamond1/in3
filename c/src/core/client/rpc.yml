in3:
  descr: |
    There are also some Incubed specific rpc-methods, which will help the clients to bootstrap and update the nodeLists.


    The incubed client itself offers special RPC-Methods, which are mostly handled directly inside the client:

  # config
  config:

    chainId:
      type: uint | string
      descr: the chainId or the name of a known chain. It defines the nodelist to connect to.
      example: goerli
      optional: true
      default: mainnet
      enum: 
        mainnet: Mainnet Chain
        goerli: Goerli Testnet
        ewc: Energy WebFoundation
        btc: Bitcoin
        ipfs: ipfs
        local: local-chain
      cmd: c
    
    finality:
      type: uint | string
      descr: the number in percent needed in order reach finality (% of signature of the validators).
      example: 50
      optional: true
      default: 0
      cmd: f
    
    includeCode:
      type: bool
      descr: if true, the request should include the codes of all accounts. otherwise only the the codeHash is returned. In this case the client may ask by calling eth_getCode() afterwards.
      example: true
      optional: true
      default: false

    maxAttempts:
      type: uint
      descr: max number of attempts in case a response is rejected.
      example: 1
      optional: true
      default: 7
      cmd: a
    
    keepIn3:
      type: bool
      descr: if true, requests sent to the input sream of the comandline util will be send theor responses in the same form as the server did.
      example: true
      optional: true
      default: false
    
    useBinary:
      type: bool
      descr: if true the client will use binary format. This will reduce the payload of the responses by about 60% but should only be used for embedded systems or when using the API, since this format does not include the propertynames anymore.
      example: true
      optional: true
      default: false
    
    experimental:
      type: bool
      descr: iif true the client allows to use use experimental features, otherwise a exception is thrown if those would be used.
      example: true
      optional: true
      default: false
      cmd: x

    timeout:
      descr: specifies the number of milliseconds before the request times out. increasing may be helpful if the device uses a slow connection.
      type: uint
      optional: true
      example: 100000
      default: 20000

    proof:
      descr:  if true the nodes should send a proof of the response. If set to none, verification is turned off completly.
      type: string
      optional: true
      enum:
        - none
        - standard
        - full
      example: none
      default: standard
      cmd: p

    replaceLatestBlock:
      descr:  if specified, the blocknumber *latest* will be replaced by blockNumber- specified value.
      type: uint
      optional: true
      example: 6
      cmd: l


  # rpc-commands

  in3_config:
    descr: changes the configuration of a client. The configuration is passed as the first param and may contain only the values to change.
    params:
      config:
        descr:  a Object with config-params.
   
    returns:
      descr: an boolean confirming that the config has changed.
    example:
      request:
        - chainId: "0x5"
          maxAttempts: 4
          nodeLimit: 10
          nodes:
            nodeList:
              - address:  "0x1234567890123456789012345678901234567890"
                url: "https://mybootnode-A.com"
                props: "0xFFFF"
              - address:  "0x1234567890123456789012345678901234567890"
                url: "https://mybootnode-B.com"
                props: "0xFFFF"
      response: true

