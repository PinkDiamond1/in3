zksync:
  descr: |
    *Important: This feature is still experimental and not considered stable yet. In order to use it, you need to set the experimental-flag (-x on the comandline or `"experimental":true`!*

    the zksync-plugin is able to handle operations to use [zksync](https://zksync.io/) like deposit transfer or withdraw. Also see the #in3-config on how to configure the zksync-server or account.

    Also in order to sign messages you need to set a signer!

    All zksync-methods can be used with `zksync_` or `zk_` prefix. 

  # config
  config:

    zksync:
      descr: configuration for zksync-api  ( only available if build with `-DZKSYNC=true`, which is on per default).
      type: 
        provider_url:
          descr: url of the zksync-server (if not defined it will be choosen depending on the chain)
          type: string
          optional: true
          default: https://api.zksync.io/jsrpc

        account:
          descr: the account to be used. if not specified, the first signer will be used.
          type: address
          optional: true

        sync_key:
          descr: the seed used to generate the sync_key. This way you can explicitly set the pk instead of derriving it from a signer.
          type: bytes32
          optional: true

        main_contract:
          descr: address of the main contract- If not specified it will be taken from the server.
          type: address
          optional: true

        signer_type:
          descr: type of the account. Must be either `pk`(default), `contract` (using contract signatures) or `create2` using the create2-section.
          type: string
          optional: true
          default: pk

        musig_pub_keys:
          descr: concatenated packed public keys (32byte) of the musig signers. if set the pubkey and pubkeyhash will based on the aggregated pubkey. Also the signing will use multiple keys.
          type: bytes
          optional: true

        musig_urls:
          descr:  a array of strings with urls based on the `musig_pub_keys`. It is used so generate the combined signature by exchaing signature data (commitment and signatureshares) if the local client does not hold this key.
          type: string[]
          optional: true

        create2:
          descr: create2-arguments for sign_type `create2`. This will allow to sign for contracts which are not deployed yet.
          optional: true
          type:
            creator:
              descr: The address of contract or EOA deploying the contract ( for example the GnosisSafeFactory )
              type: address
            saltarg:
              descr: a salt-argument, which will be added to the pubkeyhash and create the create2-salt.
              type: bytes32
            codehash:
              descr: the hash of the actual deploy-tx including the constructor-arguments. 
              type: bytes32


          

