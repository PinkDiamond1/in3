zksync:
  descr: |
    *Important: This feature is still experimental and not considered stable yet. In order to use it, you need to set the experimental-flag (-x on the comandline or `"experimental":true`!*

    the zksync-plugin is able to handle operations to use [zksync](https://zksync.io/) like deposit transfer or withdraw. Also see the #in3-config on how to configure the zksync-server or account.

    Also in order to sign messages you need to set a signer!

    All zksync-methods can be used with `zksync_` or `zk_` prefix. 

  # config
  config:

    zksync:
      descr: configuration for zksync-api  ( only available if build with `-DZKSYNC=true`, which is on per default).
      example:
        - account: '0x995628aa92d6a016da55e7de8b1727e1eb97d337'
          sync_key: '0x9ad89ac0643ffdc32b2dab859ad0f9f7e4057ec23c2b17699c9b27eff331d816'
          signer_type: contract
        - account: '0x995628aa92d6a016da55e7de8b1727e1eb97d337'
          sync_key: '0x9ad89ac0643ffdc32b2dab859ad0f9f7e4057ec23c2b17699c9b27eff331d816'
          signer_type: create2
          create2:
            creator: '0x6487c3ae644703c1f07527c18fe5569592654bcb'
            saltarg: '0xb90306e2391fefe48aa89a8e91acbca502a94b2d734acc3335bb2ff5c266eb12'
            codehash: '0xd6af3ee91c96e29ddab0d4cb9b5dd3025caf84baad13bef7f2b87038d38251e5'
        - account:  '0x995628aa92d6a016da55e7de8b1727e1eb97d337'
          signer_type: pk
          musig_pub_keys: '0x9ad89ac0643ffdc32b2dab859ad0f9f7e4057ec23c2b17699c9b27eff331d8160x9ad89ac0643ffdc32b2dab859ad0f9f7e4057ec23c2b17699c9b27eff331d816'
          sync_key: '0xe8f2ee64be83c0ab9466b0490e4888dbf5a070fd1d82b567e33ebc90457a5734'
          musig_urls: 
            - null
            - 'https://approver.service.com'

      type: 
        provider_url:
          descr: url of the zksync-server (if not defined it will be choosen depending on the chain)
          type: string
          optional: true
          default: https://api.zksync.io/jsrpc
          cmd: zks

        account:
          descr: the account to be used. if not specified, the first signer will be used.
          type: address
          optional: true
          cmd: zka

        sync_key:
          descr: the seed used to generate the sync_key. This way you can explicitly set the pk instead of derriving it from a signer.
          type: bytes32
          optional: true
          cmd: zsk

        main_contract:
          descr: address of the main contract- If not specified it will be taken from the server.
          type: address
          optional: true

        signer_type:
          descr: type of the account. Must be either `pk`(default), `contract` (using contract signatures) or `create2` using the create2-section.
          type: string
          enum:
            pk: Private matching the account is used ( for EOA)
            contract: Contract Signature  based EIP 1271
            create2: create2 optionas are used
            
          optional: true
          default: pk
          cmd: zkat

        musig_pub_keys:
          descr: concatenated packed public keys (32byte) of the musig signers. if set the pubkey and pubkeyhash will based on the aggregated pubkey. Also the signing will use multiple keys.
          type: bytes
          optional: true
          cmd: zms

        musig_urls:
          descr:  a array of strings with urls based on the `musig_pub_keys`. It is used so generate the combined signature by exchaing signature data (commitment and signatureshares) if the local client does not hold this key.
          type: string[]
          optional: true
          cmd: zmu

        create2:
          descr: create2-arguments for sign_type `create2`. This will allow to sign for contracts which are not deployed yet.
          cmd: zc2
          optional: true
          type:
            creator:
              descr: The address of contract or EOA deploying the contract ( for example the GnosisSafeFactory )
              type: address
            saltarg:
              descr: a salt-argument, which will be added to the pubkeyhash and create the create2-salt.
              type: bytes32
            codehash:
              descr: the hash of the actual deploy-tx including the constructor-arguments. 
              type: bytes32

  # rpc
  zksync_contract_address:
    descr: returns the contract address
    result:
      descr: fetches the contract addresses from the zksync server. This request also caches them and will return the results from cahe if available.
      type:
        govContract:
          descr: the address of the govement contract
          type: address
        mainContract:
          descr: the address of the main contract
          type: address
    example:
      cmdParams: -x       
      response: 
        govContract: "0x34460C0EB5074C29A9F6FE13b8e7E23A0D08aF01"
        mainContract: "0xaBEA9132b05A70803a4E85094fD0e1800777fBEF"


  zksync_tokens:
    descr: returns the list of all available tokens
    result:
      key: token symbol
      descr: a array of tokens-definitions. This request also caches them and will return the results from cahe if available.
      type:
        address:
          descr: the address of the ERC2-Contract or 0x00000..000 in case of the native token (eth)
          type: address
        decimals:
          descr: decimals to be used when formating it for human readable representation.
          type: int
        id:
          descr: id which will be used when encoding the token.
          type: uint64
        symbol:
          descr: symbol for the token
          type: string
    example:
      cmdParams: -x       
      response: 
        BAT:
          address: '0x0d8775f648430679a709e98d2b0cb6250d2887ef'
          decimals: 18
          id: 8
          symbol: BAT
        BUSD:
          address: '0x4fabb145d64652a948d72533023f6e7a623c7c53'
          decimals: 18
          id: 6
          symbol: BUSD
        DAI:
          address: '0x6b175474e89094c44da98b954eedeac495271d0f'
          decimals: 18
          id: 1
          symbol: DAI
        ETH:
          address: '0x0000000000000000000000000000000000000000'
          decimals: 18
          id: 0
          symbol: ETH

  zksync_account_info:
    descr: returns account_info from the server
    params:
      address:
        descr: the account-address. if not specified, the client will try to use its own address based on the signer config.
        type: address
        optional: true
    result:
      descr: the current state of the requested account.
      type:
        address:
          descr: the address of the account
          type: address
        commited:
          descr: the state of the zksync operator after executing transactions successfully, but not not verified on L1 yet.
          type:
            balances:
              descr: the token-balance
              key: the token
              type: uint256
            nonce:
              descr: the nonce or transaction count.
              type: uint64
            pubKeyHash:
              descr: the pubKeyHash set for the requested account or `0x0000...` if not set yet.
              type: address
        depositing:
          descr: the state of all depositing-tx.
          type:
            balances:
              descr: the token-values.
              key: the token
              type: uint256
        id:
          descr: the assigned id of the account, which will be used when encoding it into the rollup.
          type: uint64
        verified:
          descr: the state after the rollup was verified in L1.
          type:
            balances:
              descr: the token-balances.
              key: the token
              type: uint256
            nonce:
              descr: the nonce or transaction count.
              type: uint64
            pubKeyHash:
              descr: the pubKeyHash set for the requested account or `0x0000...` if not set yet.
              type: address
    example:
      cmdParams: -x -pk 0xe41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000
      response: 
        address: '0x3b2a1bd631d9d7b17e87429a8e78dbbd9b4de292'
        committed:
          balances: {}
          nonce: 0
          pubKeyHash: sync:0000000000000000000000000000000000000000
        depositing:
          balances: {}
        id:
        verified:
          balances: {}
          nonce: 0
          pubKeyHash: sync:0000000000000000000000000000000000000000


  zksync_tx_info:
    descr: returns the state or receipt of the the zksync-tx
    params:
      tx:
        descr: the txHash of the send tx
        type: bytes32
    result:
      descr: the current state of the requested tx.
      type:
        block:
          descr: the blockNumber containing the tx or `null` if still pending
          type: uint64
        executed:
          descr: true, if the tx has been executed by the operator. If false it is still in the txpool of the operator.
          type: bool
        success:
          descr: if executed, this property marks the success of the tx.
          type: bool
        failReason:
          descr: if executed and failed this will include an error message
          type: string
    example:
      cmdParams: -x       
      request:
        - "sync-tx:e41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000"
      response: 
        block: null
        executed: false
        failReason: null
        success: null

  zksync_set_key:
    descr: |
      sets the signerkey based on the current pk or as configured in the config.
      You can specify the key by either
      - setting a signer ( the sync key will be derrived through a signature )
      - setting the seed directly ( `sync_key` in the config)
      - setting the `musig_pub_keys` to generate the pubKeyHash based on them
      - setting the `create2` options and the sync-key will generate the account based on the pubKeyHash


      we support 3 different signer types (`signer_type` in the `zksync` config) :

      1. `pk` - Simple Private Key
          If a signer is set (for example by setting the pk), incubed will derrive the sync-key through a signature and use it
      2. `contract` - Contract Signature
          In this case a preAuth-tx will be send on L1 using the signer. If this contract is a mutisig, you should make sure, you have set the account explicitly in the config and also activate the multisig-plugin, so the transaction will be send through the multisig.
      3. `create2` - Create2 based Contract

    params:
      token:
        descr: the token to pay the gas (either the symbol or the address)
        type: string
    result:
      descr: the pubKeyHash, if it was executed successfully
      type: address
    example:
      cmdParams: -x -pk 0xe41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000
      request:
        - eth
      response: "sync:e41d2489571d322189246dafa5ebde1f4699f498"

  zksync_pubkeyhash:
    sync: true
    descr: returns the current PubKeyHash based on the configuration set.
    params: 
      pubKey:
        descr: the packed public key to hash ( if given the hash is build based on the given hash, otherwise the hash is based on the config)
        type: bytes32
        optional: true
    result:
      descr: the pubKeyHash
      type: address
    example:
      cmdParams: -x -pk 0xe41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000 
      response: "sync:4dcd9bb4463121470c7232efb9ff23ec21398e58"


  zksync_pubkey:
    sync: true
    descr: | 
      returns the current packed PubKey based on the config set.

      If the config contains public keys for musig-signatures, the keys will be aggregated, otherwise the pubkey will be derrived from the signing key set.
    result:
      descr: the pubKey
      type: bytes32
    example:
      cmdParams: -x -pk 0xe41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000 
      response: "0xfca80a469dbb53f8002eb1e2569d66f156f0df24d71bd589432cc7bc647bfc04"
  


  zksync_account_address:
    sync: true
    descr: returns the address of the account used.
    result:
      descr: the account used.
      type: address
    example:
      cmdParams: -x -pk 0xe41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000 
      response: "0x3b2a1bd631d9d7b17e87429a8e78dbbd9b4de292"
  
  


  zksync_sign:
    descr: |
      returns the schnorr musig signature based on the current config. 

      This also supports signing with multiple keys. In this case the configuration needs to sets the urls of the other keys, so the client can then excange all data needed in order to create the combined signature. 
      when exchanging the data with other keys, all known data will be send using `zk_sign` as method, but instead of the raw message a object with those data will be passed.

    params:
      message:
        descr: the message to sign
        type: bytes
    result:
      descr: |
        The return value are 96 bytes of signature:
        - `[0...32]` packed public key
        - `[32..64]` r-value
        - `[64..96]` s-value
      type: bytes96
    example:
      cmdParams: -x -pk 0xe41d2489571d322189246dafa5ebde1f4699f498000000000000000000000000 
      request:
        - '0xaabbccddeeff'
      response: "0xfca80a469dbb53f8002eb1e2569d66f156f0df24d71bd589432cc7bc647bfc0493f69034c3980e7352741afa6c171b8e18355e41ed7427f6e706f8432e32e920c3e61e6c3aa00cfe0c202c29a31b69cd0910a432156a0977c3a5baa404547e01"
  
  zksync_verify:
    sync: true
    descr: |
      returns 0 or 1 depending on the successfull verification of the signature.

      if the `musig_pubkeys` are set it will also verify against the given public keys list. 

    params:
      message:
        descr: the message which was supposed to be signed
        type: bytes
      signature:
        descr: the signature (96 bytes)
        type: bytes96
    result:
      descr: 1 if the signature(which contains the pubkey as the first 32bytes) matches the message.
      type: int
    example:
      cmdParams: -x       
      request:
        - '0xaabbccddeeff'
        - '0xfca80a469dbb53f8002eb1e2569d66f156f0df24d71bd589432cc7bc647bfc0493f69034c3980e7352741afa6c171b8e18355e41ed7427f6e706f8432e32e920c3e61e6c3aa00cfe0c202c29a31b69cd0910a432156a0977c3a5baa404547e01'
      response: 1
  
  zksync_ethop_info:
    descr: returns the state or receipt of the the PriorityOperation
    params: 
      opId:
        descr: the opId of a layer-operstion (like depositing)
        type: uint64

  zksync_get_token_price:
    descr: returns current token-price
    params:
      token:
        descr: Symbol or address of the token
        type: string
    result:
      descr: the token price
      type: float
    example:
      cmdParams: -x       
      request:
        - WBTC
      response: 11320.002167

  zksync_get_tx_fee:
    descr: calculates the fees for a transaction.
    params:
      txType:
        descr: The Type of the transaction "Withdraw" or "Transfer" 
        type: string
      address:
        descr: the address of the receipient
        type: address
      token:
        descr: the symbol or address of the token to pay
        type: string
    result:
      descr: the fees split up into single values
      type:
        feeType:
          descr: Type of the transaaction
          type: string
        gasFee:
          descr: the gas for the core-transaction
          type: uint64
        gasPriceWei:
          descr: current gasPrice
          type: uint64
        gasTxAmount:
          descr: gasTxAmount
          type: uint64
        totalFee:
          descr: total of all fees needed to pay in order to execute the transaction
          type: uint64
        zkpFee:
          descr: zkpFee
          type: uint64
    example:
      cmdParams: -x       
      request:
        - Transfer
        - '0xabea9132b05a70803a4e85094fd0e1800777fbef'
        - BAT
      response:
        feeType: "TransferToNew"
        gasFee: "47684047990828528"
        gasPriceWei: "116000000000"
        gasTxAmount: "350"
        totalFee: "66000000000000000"
        zkpFee: "18378682992117666"
                
  zksync_sync_key:
    descr: returns private key used for signing zksync-transactions
    result:
      descr: the raw private key configured based on the signers seed
    example: 
      cmdParams: -x -pk 0xb0f60e4783ccc1f6234deed9e21f16d460c4176fd7adbd4f31d17e283b8cfb1c
      response: '0x019125314fda133d5bf62cb454ee8c60927d55b68eae8b8b8bd13db814389cd6'

  zksync_deposit:
    descr: sends a deposit-transaction and returns the opId, which can be used to tradck progress.
    params:
      amount:
        descr: the value to deposit in wei (or smallest token unit)
        type: uint256
      token:
        descr: the token as symbol or address
        type: string
      approveDepositAmountForERC20:
        descr: if true and in case of an erc20-token, the client will send a approve transaction first, otherwise it is expected to be already approved.
        type: bool
        optional: true
      account:
        descr: address of the account to send the tx from. if not specified, the first available signer will be used.
        type: address
        optional: true
    result:
      descr: the opId. You can use `zksync_ethop_info` to follow the state-changes.
      type: uint64
    example:
      cmdParams: -x -pk 0xb0f60e4783ccc1f6234deed9e21f16d460c4176fd7adbd4f31d17e283b8cfb1c
      request:
        - 1000
        - WBTC
      response: 74

  zksync_transfer:
    descr: sends a zksync-transaction and returns data including the transactionHash.
    params:
      to:
        descr: the receipient of the tokens
        type: address
      amount:
        descr: the value to transfer in wei (or smallest token unit)
        type: uint256
      token:
        descr: the token as symbol or address
        type: string
      account:
        descr: address of the account to send the tx from. if not specified, the first available signer will be used.
        type: address
        optional: true
    result:
      descr: the transactionHash. use `zksync_tx_info` to check the progress.
      type: bytes32
    example:
      cmdParams: -x -pk 0xb0f60e4783ccc1f6234deed9e21f16d460c4176fd7adbd4f31d17e283b8cfb1c
      request:
        - 0xabea9132b05a70803a4e85094fd0e1800777fbef
        - 100
        - WBTC
      response: '0x58ba1537596739d990a33e4fba3a6fb4e0d612c5de30843a2c415dd1e5edcef1'

  zksync_withdraw:
    descr: withdraws the amount to the given `ethAddress` for the given token.
    params:
      ethAddress:
        descr: the receipient of the tokens in L1
        type: address
      amount:
        descr: the value to transfer in wei (or smallest token unit)
        type: uint256
      token:
        descr: the token as symbol or address
        type: string
      account:
        descr: address of the account to send the tx from. if not specified, the first available signer will be used.
        type: address
        optional: true
    result:
      descr: the transactionHash. use `zksync_tx_info` to check the progress.
      type: bytes32
    example:
      cmdParams: -x -pk 0xb0f60e4783ccc1f6234deed9e21f16d460c4176fd7adbd4f31d17e283b8cfb1c
      request:
        - 0xabea9132b05a70803a4e85094fd0e1800777fbef
        - 100
        - WBTC
      response: '0x58ba1537596739d990a33e4fba3a6fb4e0d612c5de30843a2c415dd1e5edcef1'

  zksync_emergency_withdraw:
    descr: withdraws all tokens for the specified token as a onchain-transaction. This is useful in case the zksync-server is offline or tries to be malicious.
    params:
      token:
        descr: the token as symbol or address
        type: string
    result:
      descr: the transactionReceipt
      type: transactionReceipt
    example:
      cmdParams: -x -pk 0xb0f60e4783ccc1f6234deed9e21f16d460c4176fd7adbd4f31d17e283b8cfb1c
      request: 
        - WBTC
      response:
        blockHash: '0xea6ee1e20d3408ad7f6981cfcc2625d80b4f4735a75ca5b20baeb328e41f0304'
        blockNumber: '0x8c1e39'
        contractAddress:
        cumulativeGasUsed: '0x2466d'
        gasUsed: '0x2466d'
        logs:
        - address: '0x85ec283a3ed4b66df4da23656d4bf8a507383bca'
          blockHash: '0xea6ee1e20d3408ad7f6981cfcc2625d80b4f4735a75ca5b20baeb328e41f0304'
          blockNumber: '0x8c1e39'
          data: 0x00000000000...
          logIndex: '0x0'
          removed: false
          topics:
          - '0x9123e6a7c5d144bd06140643c88de8e01adcbb24350190c02218a4435c7041f8'
          - '0xa2f7689fc12ea917d9029117d32b9fdef2a53462c853462ca86b71b97dd84af6'
          - '0x55a6ef49ec5dcf6cd006d21f151f390692eedd839c813a150000000000000000'
          transactionHash: '0x5dc2a9ec73abfe0640f27975126bbaf14624967e2b0b7c2b3a0fb6111f0d3c5e'
          transactionIndex: '0x0'
          transactionLogIndex: '0x0'
          type: mined
        logsBloom: 0x00000000000000000000200000...
        root:
        status: '0x1'
        transactionHash: '0x5dc2a9ec73abfe0640f27975126bbaf14624967e2b0b7c2b3a0fb6111f0d3c5e'
        transactionIndex: '0x0'

  zksync_aggregate_pubkey:
    sync: true
    descr: calculate the public key based on multiple public keys signing together using schnorr musig signatures.
    params:
      pubkeys:
        descr: concatinated packed publickeys of the signers. the length of the bytes must be `num_keys * 32` 
        type: bytes
    result:
      descr: the compact public Key
      type: bytes32
    example:
      cmdParams: -x
      request:
        - '0x0f61bfe164cc43b5a112bfbfb0583004e79dbfafc97a7daad14c5d511fea8e2435065ddd04329ec94be682bf004b03a5a4eeca9bf50a8b8b6023942adc0b3409'
      response: '0x9ce5b6f8db3fbbe66a3bdbd3b4731f19ec27f80ee03ead3c0708798dd949882b'

      


