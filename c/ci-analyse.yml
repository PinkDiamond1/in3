.only_full:
  rules:
    - changes:
        - c/**/*
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+-(alpha|beta|rc)\.[0-9]+$/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME == "develop"'

coverage:
  stage: analysis
  image: silkeh/clang:dev
  coverage: '/TOTAL.*\s+(\d+.\d+\%)\s*$/'
  extends: .only_full
  needs: []
  tags:
    - short-jobs
  script:
    - mkdir cov_build; cd cov_build
    - cmake -DIN3API=true -DIN3_LIB=false -DCMD=false -DUSE_CURL=false -DTEST=true -DCODE_COVERAGE=true -DUSE_SEGGER_RTT=false -DTRANSPORTS=false -DCMAKE_BUILD_TYPE=Debug ..
    - make -j8 &&  make ptest
    - ../scripts/lcov_report.sh | xargs llvm-cov report
    - ../scripts/lcov_report.sh | xargs llvm-cov show -show-line-counts-or-regions -output-dir=ccov/all-merged -format=html
    - ../scripts/lcov_report.sh | xargs llvm-cov export  -format=lcov  > ccov/all-merged/lcov.info
  artifacts:
    paths:
      - cov_build/ccov/all-merged

clangcheck:
  stage: analysis
  image: docker.slock.it/build-images/cmake:clang11
  needs: []
  extends: .only_full
  allow_failure: false
  tags:
    - short-jobs
  script:
    - mkdir _build
    - cd _build
    - scan-build-11 cmake -DTAG_VERSION=$CI_COMMIT_TAG -DCMAKE_BUILD_TYPE=DEBUG -DIN3_SERVER=true ..
    - scan-build-11 --status-bugs --exclude ../c/src/third-party --force-analyze-debug-code -o ../report make
  artifacts:
    paths:
      - report

cppcheck:
  stage: analysis
  image: docker.slock.it/build-images/cmake:gcc-x86-static-analysis
  extends: .only_full
  allow_failure: true
  needs: []
  tags:
    - short-jobs
  script:
    - mkdir _build
    - cd _build
    - cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Release ..
    - cd ..
    - cppcheck  --project=_build/compile_commands.json -i/builds/in3/c/in3-core/c/test/unity -i/builds/in3/c/in3-core/c/src/third-party

valgrind:
  stage: analysis
  image: docker.slock.it/build-images/cmake:valgrind
  extends: .only_full
  #  allow_failure: true
  needs: []
  tags:
    - short-jobs
  variables:
    VALGRIND_OPTS: "-v -q --error-exitcode=1 --leak-check=full --show-leak-kinds=definite --suppressions=suppress.valgrind"
  script:
    - mkdir _build
    - cd _build
    - cmake -DCMAKE_BUILD_TYPE=Release -DTEST=true -DDEBUG=false ..
    - make
    - printf "{\n  ignore_libcrypto_conditional_jump_errors\n  Memcheck:Leak\n  ...\n  obj:*/libcrypto.so.*\n}\n"  > suppress.valgrind
    - for f in test/test*; do valgrind $VALGRIND_OPTS $(pwd)/$f; done

code_quality:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "develop"'
  stage: analysis
  needs: []
  tags:
    - short-jobs
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week
  variables:
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/security-products/codequality:latest"
    REPORT_STDOUT: STDOUT

format:
  stage: analysis
  needs: []
  image: docker.slock.it/build-images/cmake:clang11
  tags:
    - short-jobs
  script:
    - find c/src/core/ c/src/cmd/ c/src/api/ c/src/verifier/ c/src/transport/ java \( -name "*.c" -o -name "*.h" -o -name "*.java" \) | xargs clang-format-11 -i
    - git diff --patch --exit-code

cpd:
  stage: analysis
  needs: []
  image: rawdee/pmd
  tags:
    - short-jobs
  script:
    - cpd --minimum-tokens 180 --language cpp --exclude c/src/third-party --files c/src
    - cpd --minimum-tokens 150 --language java --files java/src
    - cpd --minimum-tokens 150 --language python --files python

vulnerabilities:
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+(\-RC[0-9]+)?$/'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "develop"'
  stage: analysis
  extends: .only_full
  allow_failure: true
  needs:
    - docker
  tags:
    - short-jobs
  image: docker.slock.it/build-images/vulnerability-testing-tools
  script:
    - export TRIVY_AUTH_URL=$CI_REGISTRY
    - export TRIVY_USERNAME=gitlab-ci-token
    - export TRIVY_PASSWORD=$CI_JOB_TOKEN
    - trivy -f json -o vulnerability_analysis.json --exit-code 1 $COMMIT_IMAGE_TAG
  artifacts:
    paths:
      - vulnerability_analysis.json

metrics:
  stage: analysis
  image: docker.slock.it/build-images/deployment
  tags:
    - short-jobs
  needs:
    - mac_os
    - gcc8
    - wasm
    - asmjs
    - java
  script:
    - echo "mac_cmd_size `stat -c %s mac_build/bin/in3` " > metrics.txt
    - echo "wasm_min_size `stat -c %s wasm_build/bin/in3w_min.wasm` " >> metrics.txt
    - echo "wasm_js_size `stat -c %s wasm_build/bin/in3.js` " >> metrics.txt
    - echo "asmjs_js_size `stat -c %s asmjs_build/bin/in3.js` " >> metrics.txt
    - echo "java_size `stat -c %s java_build/lib/in3.jar` " >> metrics.txt
    - echo "gcc8_size `stat -c %s x64_build/bin/in3` " >> metrics.txt
    - echo "reported metrics"; cat metrics.txt
  artifacts:
    expose_as: metrics
    paths:
      - metrics.txt
    reports:
      metrics: metrics.txt
