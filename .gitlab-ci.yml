variables:
  COMMIT_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  RELEASE_IMAGE_TAG: $CI_REGISTRY_IMAGE:latest

stages:
  - build
  - bindings
  - test
  - deploy


.conanbuild:
  stage: build
  tags:
    - short-jobs
  script:
    - mkdir $BUILD
    - cd $BUILD
    - cmake $CONAN_OPTS -DCMAKE_BUILD_TYPE=Release ..
    - make
  variables:
    CONAN_OPTS: ""
    BUILD: "build"
  artifacts:
    paths:
      - $BUILD/bin
      - $BUILD/lib

gcc8:
  image: docker.slock.it/build-images/cmake:gcc8
  stage: build
  tags:
    - short-jobs
  script:
    - mkdir x64_build
    - cd x64_build
    - cmake -DCMAKE_BUILD_TYPE=Release -DJAVA=true -DBUILD_DOC=true .. 
    - make
  artifacts:
    paths:
      - x64_build/bin
      - x64_build/lib
      - x64_build/docs/doc_doxygen


win_mingw:
 image: docker.slock.it/build-images/cmake:gcc7-mingw
 extends: .conanbuild
 variables:
   CONAN_OPTS: "-DLIBCURL_LINKTYPE=static -DJAVA=true" 
   BUILD: "win_build"

gcc8-armv7:
  image: docker.slock.it/build-images/cmake:gcc8-armv7
  extends: .conanbuild

gcc8-armv7hf:
  image: docker.slock.it/build-images/cmake:gcc8-armv7hf
  extends: .conanbuild

gcc8-x86:
  image: docker.slock.it/build-images/cmake:gcc8-x86
  extends: .conanbuild
  variables:
    CONAN_OPTS: "-DJAVA=true" 
    BUILD: "x86_build"
      
gcc5:
  image: docker.slock.it/build-images/cmake:gcc5
  extends: .conanbuild

clang50:
  image: docker.slock.it/build-images/cmake:clang50
  extends: .conanbuild

clang9:
  image: docker.slock.it/build-images/cmake:clang9
  extends: .conanbuild

mac_os:
  stage: build
  script:
    - mkdir mac_build
    - cd mac_build
    - cmake -DTEST=true -DEVM_GAS=true -DCMAKE_BUILD_TYPE=Debug -DLIBCURL_TYPE=shared .. 
    - make 
    - make ptest
    - rm -rf *
    - cmake -DCMAKE_BUILD_TYPE=MINSIZEREL -DJAVA=true .. 
    - make 

  artifacts:
    paths:
      - mac_build/docs
      - mac_build/lib
      - mac_build/bin
  tags:
    - mac-mini-runner

wasm:
  image: docker.slock.it/build-images/cmake:clang9
  stage: bindings
  tags:
    - short-jobs
  script:
    - mkdir wasm_build
    - cd wasm_build
    - emconfigure cmake -DWASM=true -DTRANSPORTS=false -DBUILD_DOC=false -DIN3API=false -DCMD=false -DEXAMPLES=false -DCMAKE_BUILD_TYPE=MINSIZEREL ..
    - make
    - cd bin && ../../scripts/merge_wasm.sh ../../src/bindings/wasm

  artifacts:
    paths:
      - wasm_build/module
      - wasm_build/bin


java:
  image: docker.slock.it/build-images/cmake:gcc8
  stage: bindings
  tags:
    - short-jobs
  dependencies:
    - mac_os
    - win_mingw
    - gcc8
  script:
    - mkdir java_build
    - cd java_build
    - cmake -DCMAKE_BUILD_TYPE=Release -DJAVA=true -DBUILD_DOC=true .. 
    - cp ../mac_build/lib/libin3_jni.dylib ../src/bindings/java/in3/native/
    - cp ../win_build/lib/libin3_jni.so ../src/bindings/java/in3/native/in3_jni.dll
    - cp ../x64_build/lib/libin3_jni.so ../src/bindings/java/in3/native/
    - make in3j
  artifacts:
    paths:
      - java_build/lib

# ##### test ######


c_tests:
  image: docker.slock.it/build-images/cmake:gcc8
  stage: test
  tags:
    - short-jobs
  script:
    - mkdir testbuild
    - cd testbuild
    - cmake -DTEST=true -DEVM_GAS=true -DCMAKE_BUILD_TYPE=Debug ..
    - make
    - CTEST_OUTPUT_ON_FAILURE=1 make test
  artifacts:
    paths:
      - testbuild/test
      - Testing

java_linux:
  image: docker.slock.it/build-images/cmake:gcc8
  stage: test
  script:
    - java -cp java_build/lib/in3.jar in3.IN3 eth_blockNumber
  tags:
    - short-jobs

java_macos:
  stage: test
  script:
    - java -cp java_build/lib/in3.jar in3.IN3 eth_blockNumber
  tags:
    - mac-mini-runner


# #### deploy #####
docker:
  stage: deploy
  tags:
    - short-jobs
  services:
    - docker:dind
  image: jonaskello/docker-and-compose:latest
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $COMMIT_IMAGE_TAG .
    - docker tag $COMMIT_IMAGE_TAG $RELEASE_IMAGE_TAG
    - docker push $RELEASE_IMAGE_TAG
    - docker push $COMMIT_IMAGE_TAG

wasm-slockit-npm:
  image: docker.slock.it/build-images/node:11-alpine
  stage: deploy
  tags:
    - short-jobs
  only: # deploy only on  semantic versions tags
    - /^v[0-9]*\.[0-9]*\.[0-9]*-?.*$/
  except:
    - branches
  dependencies:
    - wasm
  script:
    - sh /prepare.sh
    - cd wasm_build/module
    - npm --no-git-tag-version --allow-same-version -f version $CI_COMMIT_TAG
    - npm publish

wasm-public-npm:
  image: docker.slock.it/build-images/node:11-alpine
  stage: deploy
  tags:
    - short-jobs
  only:
    - /^v[0-9]+.[0-9]+.[0-9]+$/
  except:
    - branches
  dependencies:
    - wasm
  script:
    - sh /prepare.sh
    - cd wasm_build/module
    - npm --no-git-tag-version --allow-same-version -f version $CI_COMMIT_TAG
    - npm publish --registry https://registry.npmjs.org
