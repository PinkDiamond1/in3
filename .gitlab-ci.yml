stages:
  - build
  - test
  - deploy

build-in3:
  image: conanio/gcc8
  stage: build
  tags:
    - short-jobs
  script:
    - mkdir build
    - cd build
    - conan install .. --build libcurl
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make
  artifacts:
    paths:
      - build/src

test-in3:
  image: conanio/gcc8
  stage: test
  tags:
    - short-jobs
  script:
    - sudo apt-get install check
    - mkdir build
    - cd build
    - conan install .. --build libcurl
    - cmake -DTEST=true -DCMAKE_BUILD_TYPE=Debug ..
    - make
    - CTEST_OUTPUT_ON_FAILURE=1 make test
  artifacts:
    paths:
      - build/test
      - Testing

.xbuild:
  services:
    - docker:dind
  image: jonaskello/docker-and-compose:latest
  stage: build
  tags:
    - short-jobs
  artifacts:
    paths:
      - build/src
      - build/docs

  script:
    - apk add --no-cache bash
    - docker run --rm "dockcross/$IMAGE" > ./dockcross
    - chmod +x ./dockcross
    - ./dockcross bash -c "$INSTALL; sudo apt-get update ; sudo apt-get -y install doxygen ; mkdir build; cd build; conan install .. $CONAN_OPTS && cmake -DCMAKE_BUILD_TYPE=Release .. && make"
  variables:
     IMAGE: "linux-x64"
     INSTALL: "cd ."
     CONAN_OPTS: ""



.conanbuild:
  stage: build
  tags:
    - short-jobs
  script:
    - mkdir build
    - cd build
    - conan install .. --build missing 
    - cmake -DCMAKE_BUILD_TYPE=Release ..
    - make

gcc8-armv7:
  image: conanio/gcc8-armv7
  extends: .conanbuild
  artifacts:
    paths:
      - build/src

gcc8-armv7hf:
  image: conanio/gcc8-armv7hf
  extends: .conanbuild
  artifacts:
    paths:
      - build/src

gcc5:
  image: conanio/gcc5
  extends: .conanbuild
  artifacts:
    paths:
      - build/src

clang50:
  image: conanio/clang50
  extends: .conanbuild
  artifacts:
    paths:
      - build/src

  
linux-x64-static:
  extends: .xbuild
  variables:
     IMAGE: linux-x64
     CONAN_OPTS: "-o libcurl:shared=False"

linux-x64-shared:
  extends: .xbuild
  variables:
     IMAGE: linux-x64
     CONAN_OPTS: "-o libcurl:shared=True"


zephyr:
  image: agustinhenze/zephyr-arm
  stage: build
  tags:
    - short-jobs
  artifacts:
     paths:
      - src/zephyr/build
  script:
    - wget --quiet https://github.com/zephyrproject-rtos/meta-zephyr-sdk/releases/download/${ZEPHYR_SDK_VERSION}/zephyr-sdk-${ZEPHYR_SDK_VERSION}-setup.run 
    - chmod +x zephyr-sdk-${ZEPHYR_SDK_VERSION}-setup.run 
    - ./zephyr-sdk-${ZEPHYR_SDK_VERSION}-setup.run --quiet -- -d /opt/sdk/zephyr-sdk-${ZEPHYR_SDK_VERSION} 
    - rm zephyr-sdk-${ZEPHYR_SDK_VERSION}-setup.run
    - git clone https://github.com/zephyrproject-rtos/zephyr.git 
    - source zephyr/zephyr-env.sh
    - export ZEPHYR_SDK_INSTALL_DIR="/opt/sdk/zephyr-sdk-${ZEPHYR_SDK_VERSION}" 
    - cd src/zephyr; mkdir build; cd build
    - cmake -DBOARD=nrf52840_pca10056 -DCMAKE_BUILD_TYPE=Release ..
    - make

  variables:
    LANG : C.UTF-8
    LC_ALL : C.UTF-8
    ZEPHYR_GCC_VARIANT : gccarmemb
    GCCARMEMB_TOOLCHAIN_PATH : /usr
    CROSS_COMPILE : /usr/bin/arm-none-eabi-
    ZEPHYR_SDK_VERSION : "0.9.5"


pages:
  tags:
    - short-jobs
  stage: deploy
  when: always
  environment:
    name: test-results
    url: https://in3.git-pages.slock.it/c/in3-core
  dependencies:
    - linux-x64-shared
  script:
    - mkdir -p public/
    - cp -r build/docs/doc_doxygen/html/* public/
  artifacts:
    paths:
      - public



#windows-x64:
#  extends: .xbuild
#  variables:
#     IMAGE: windows-x64

#linux-armv5:
#  extends: .xbuild
#  variables:
#     IMAGE: linux-armv5

#linux-arm64:
#  extends: .xbuild
#  variables:
#     IMAGE: linux-arm64

#linux-armv6:
#  extends: .xbuild
#  variables:
#     IMAGE: linux-armv6

#linux-armv7:
#  extends: .xbuild
#  variables:
#     IMAGE: linux-armv7


#windows-x86:
#  extends: .xbuild
#  variables:
#     IMAGE: windows-x86

#manylinux-x64:
#  extends: .xbuild
#  variables:
#     IMAGE: manylinux-x64
#     CONAN_OPTS : --build libcurl
#     INSTALL: "apk add py-pip; pip install conan"
