.only_rust:
  rules:
    - changes:
        - rust/**/*
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+-(alpha|beta|rc)\.[0-9]+$/'
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME == "develop"'

.rust_multiarch:
  image: docker.slock.it/build-images/cmake:rust
  stage: rust
  extends: .only_rust
  tags:
    - short-jobs
  services:
    - docker:18.09-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    TARGET: ""
    BUILD_DIR: ""
  script:
    - export CROSS_DOCKER_IN_DOCKER=false
    - export RUST_BACKTRACE=1
    - export OPENSSL_DIR=/usr/lib/ssl
    - docker ps -a
    - cd rust/
    - mkdir -p target/native
    - cp ../$BUILD_DIR/lib/libin3.a target/native/libin3_$TARGET.a
    - export UPDATE_IN3_BINDINGS=1
    - cross run --example custom_transport --target $TARGET --release --jobs 8

rust:
  image: docker.slock.it/build-images/cmake:rust
  stage: bindings
  needs: []
  tags:
    - short-jobs
  script:
    - mkdir -p build_rust
    - cd build_rust
    - rm -rf *
    - cmake -DCMAKE_BUILD_TYPE=MINSIZEREL -DDEV_NO_INTRN_PTR=OFF -DUSE_CURL=false ..
    - make -j8
    - cd ../rust/
    - cargo clean
    - mkdir -p ../rust/target/native
    - cp ../build_rust/lib/libin3.a target/native/libin3_x86_64-unknown-linux-gnu.a
    - export UPDATE_IN3_BINDINGS=1
    - cargo build --jobs 8
    - cargo test --jobs 8

rust_linux:
  extends: .rust_multiarch
  variables:
    TARGET: "x86_64-unknown-linux-gnu"
    BUILD_DIR: "gcc_legacy"
  needs:
    - gcc_legacy

rust_win:
  extends: .rust_multiarch
  variables:
    TARGET: "x86_64-pc-windows-gnu"
    BUILD_DIR: "win_jni"
  needs:
    - win_jni

rust_arm7:
  extends: .rust_multiarch
  variables:
    TARGET: "armv7-unknown-linux-gnueabihf"
    BUILD_DIR: "arm_jni_build"
  needs:
    - arm_jni